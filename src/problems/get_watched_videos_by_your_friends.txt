use std::collections::{HashMap, HashSet, VecDeque};
use std::cmp::Reverse;

impl Solution {
    pub fn watched_videos_by_friends(watched_videos: Vec<Vec<String>>, friends: Vec<Vec<i32>>, id: i32, level: i32) -> Vec<String> {
        let mut res: HashMap<String, i32> = HashMap::new();
        // Keep track of visited friends
        let mut visited: HashSet<i32> = HashSet::new();
        
        // Create queue for BFS traversal
        // The queue contains touples (person_id, level)
        let mut queue: VecDeque<(i32, i32)> = VecDeque::new();
        // Start exploring from node id
        queue.push_back((id, 0));

        while let Some((curr_id, curr_level)) = queue.pop_front() {
            // Visit
            if visited.contains(&curr_id) || curr_level > level {
                continue;
            }
            visited.insert(curr_id);

            // Chech videos and update map
            if curr_id != id && curr_level == level {
                for video in watched_videos[curr_id as usize].clone() {
                    res.entry(video).and_modify(|x| *x += 1).or_insert(1);
                }
            }

            // Explore
            for &friend in &friends[curr_id as usize] {
                queue.push_back((friend, curr_level + 1));
            } 
        }
        // Sort res by freq
        let mut res: Vec<(String, i32)> = res.drain().collect();
        res.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));
        let (sorted_movies, _) = res.into_iter().unzip();

        sorted_movies
    }
}