use std::collections::HashSet;

struct UnionFind {
    parent: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let parent = (0..n).collect();
        UnionFind {
            parent,
            ranks: vec![0; n],
        }
    }

    fn find(&mut self, x: usize) -> usize {
        if self.parent[x] != x {
            self.parent[x] = self.find(self.parent[x]);
        }
        self.parent[x]
    }

    fn union(&mut self, u: usize, v: usize) {
        let i = self.find(u);
        let j = self.find(v);

        if i == j {
            return;
        }
        if self.ranks[i] > self.ranks[j] {
            self.parent[j] = i;
        } else if self.ranks[i] < self.ranks[j] {
            self.parent[i] = j;
        } else {
            self.parent[i] = j;
            self.ranks[j] += 1;
        }
    }
}

impl Solution {
    pub fn validate_binary_tree_nodes(n: i32, left_child: Vec<i32>, right_child: Vec<i32>) -> bool {
        let n = n as usize;
        let mut uf = UnionFind::new(n);
        let mut parent_count = vec![0; n];

        for (node, (&left, &right)) in left_child.iter().zip(right_child.iter()).enumerate() {
            if left != -1 {
                let left = left as usize;

                // Check if node has more than one parent
                parent_count[left] += 1;
                if parent_count[left] > 1 {
                    return false;
                }

                // Check for cycles
                if uf.find(node) == uf.find(left) {
                    return false;
                }
                uf.union(node, left);
            }

            if right != -1 {
                let right = right as usize;

                // Check if node has more than one parent
                parent_count[right] += 1;
                if parent_count[right] > 1 {
                    return false;
                }

                // Check for cycles
                if uf.find(node) == uf.find(right) {
                    return false;
                }
                uf.union(node, right);
            }
        }

        // Validate there is exactly one root
        let root_count = parent_count.iter().filter(|&&x| x == 0).count();
        root_count == 1
    }
}
