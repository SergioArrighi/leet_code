impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let mut solutions: Vec<Vec<i32>> = Vec::new();
        let mut solution: Vec<i32> = Vec::new();

        fn backtrack(nums: &Vec<i32>, solutions: &mut Vec<Vec<i32>>, solution: &mut Vec<i32>, start: usize) {
            if (solution.len() <= nums.len()) {
                solutions.push(solution.clone());
            }

            for i in start..nums.len() {
                solution.push(nums[i]);
                backtrack(nums, solutions, solution, i + 1);
                solution.pop();
            }
        }

        backtrack(&nums, &mut solutions, &mut solution,0);

        solutions
    }
}

impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        // Start with an empty set as the initial solution


        nums.iter().fold(vec![vec![]], |mut solutions, &num| {
            let new_solutions: Vec<Vec<i32>> = solutions.iter().map(|set| {
                let mut new_solution = set.clone();
                new_solution.push(num);
                new_solution
            }).collect();
            solutions.extend(new_solutions);
            solutions
        })
    }
}