struct UnionFind {
    parents: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let mut parents = vec![0; n];
        for i in 0..n {
            parents[i] = i;
        }
        UnionFind {
            parents,
            ranks: vec![0; n],
        }
    }

    fn find(&mut self, x: usize) -> usize {
        if self.parents[x] != x {
            // Path compression
            self.parents[x] = self.find(self.parents[x]);
        }
        self.parents[x]
    }

    fn union(&mut self, x: usize, y: usize) {
        let mut i = self.find(x);
        let mut j = self.find(y);
        
        if i == j {
            return;
        }
        
        // Union by rank
        if self.ranks[i] < self.ranks[j] {
            self.parents[i] = j;
        } else if self.ranks[i] > self.ranks[j] {
            self.parents[j] = i;
        } else {
            self.parents[i] = j;
            self.ranks[j] += 1;
        }
    }
}

impl Solution {
    pub fn valid_path(n: i32, edges: Vec<Vec<i32>>, source: i32, destination: i32) -> bool {
        let n = n as usize;
        let mut uf = UnionFind::new(n);
        for edge in edges {
            let u = edge[0] as usize;
            let v = edge[1] as usize;
            uf.union(u, v);
        }
        uf.find(source as usize) == uf.find(destination as usize)
    }
}