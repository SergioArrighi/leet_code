impl Solution {
    // 8
    // high = 8 low = 0
    // mid = low + (high - low) / 2 => 4
    // 4*4=16 16>8 => high=mid

    // mid = 0 + (4 - 0) /2 => 2
    // 2*2=4 4<8 low=mid
    // mid = 2 + (4 /2) /2 => 3
    // 3*3 = 9 9>8 high = mid -> high = 3, low = 2
    // low = high - 1 => ret low

    pub fn my_sqrt(x: i32) -> i32 {
        let x: i64 = x.into();
        let mut high: i64 = x;
        let mut low: i64 = 0;
        if x == 1 {
            return 1;
        }
        while low != high - 1 {
            let mid: i64 = low + (high - low) / 2;
            let mid_squared = mid * mid;
            if mid_squared == x {
                return mid as i32;
            } else if mid_squared > x {
                high = mid;
            } else {
                low = mid;
            }
        }
        low as i32
    }
}