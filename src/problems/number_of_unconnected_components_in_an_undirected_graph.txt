struct UnionFind {
    parent: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let parent = (0..n).collect();
        UnionFind {
            parent,
            ranks: vec![0; n],
        }
    }

    fn find(&mut self, x: usize) -> usize {
        if self.parent[x] != x {
            self.parent[x] = self.find(self.parent[x]);
        }
        self.parent[x]
    }

    fn union(&mut self, u: usize, v: usize) {
        let i = self.find(u);
        let j = self.find(v);

        if i == j {
            return;
        } else if self.ranks[i] > self.ranks[j] {
            self.parent[j] = i;
        } else if self.ranks[i] < self.ranks[j] {
            self.parent[i] = j;
        } else {
            self.parent[i] = j;
            self.ranks[j] += 1;
        }
    }
}

impl Solution {
    pub fn count_components(n: i32, edges: Vec<Vec<i32>>) -> i32 {
        let n = n as usize;
        let mut uf = UnionFind::new(n);

        for edge in edges {
            let (u, v) = (edge[0] as usize, edge[1] as usize);
            uf.union(u, v);
        }

        let mut unique_roots = std::collections::HashSet::new();

        for i in 0..n {
            unique_roots.insert(uf.find(i));
        }

        unique_roots.len() as i32
    }
}