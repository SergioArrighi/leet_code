    impl Solution {
    // Khan algo - Topological sort
    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {
        use std::collections::VecDeque;
        let num_courses = num_courses as usize;
        let mut indegree = vec![0; num_courses as usize];
        let mut node_edges: Vec<Vec<usize>> = vec![vec![]; num_courses as usize];

        for pre in prerequisites {
            indegree[pre[0] as usize] += 1;
            node_edges[pre[1] as usize].push(pre[0] as usize);
        }

        let mut queue: VecDeque<usize> = VecDeque::new();
        for i in 0..num_courses as usize {
            if indegree[i] == 0 {
                queue.push_back(i);
            }
        }

        let mut visited = 0;
        while let Some(node) = queue.pop_front() {
            visited += 1;
            let nodes = node_edges[node].clone();
            for n in 0..nodes.len() {
                indegree[nodes[n]] -= 1;
                if indegree[nodes[n]] == 0 {
                    queue.push_back(nodes[n]);
                }
            }
        }

        visited == num_courses
    }
}