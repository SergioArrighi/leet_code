struct UnionFind {
    parent: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let mut parent = vec![0; n];
        for i in 0..n {
            parent[i] = i;
        }
        UnionFind {
            parent,
            ranks: vec![0; n],
        }
    }

    fn find(&mut self, x: usize) -> usize {
        if self.parent[x] != x {
            self.parent[x] = self.find(self.parent[x]);
        }
        self.parent[x]
    }

    fn union(&mut self, u: usize, v: usize) {
        let i = self.find(u);
        let j = self.find(v);

        if i == j {
            return;
        } else if self.ranks[i] > self.ranks[j] {
            self.parent[j] = i;
        } else if self.ranks[i] < self.ranks[j] {
            self.parent[i] = j;
        } else {
            self.parent[i] = j;
            self.ranks[j] += 1;
        }
    }
}

impl Solution {
    pub fn remove_stones(stones: Vec<Vec<i32>>) -> i32 {
        use std::collections::{HashMap, HashSet};

        let n = stones.len();
        let mut uf = UnionFind::new(20000);

        for stone in &stones {
            let (u, v) = (stone[0] as usize, stone[1] as usize + 10001);
            uf.union(u, v);
        }

        let mut unique = HashSet::new();
        for stone in &stones {
            let row = stone[0] as usize;
            unique.insert(uf.find(row));
        }

        (n - unique.len()) as i32
    }
        
}
