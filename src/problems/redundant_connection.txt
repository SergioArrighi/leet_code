struct UnionFind {
    parent: Vec<usize>,
    ranks: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let mut parent = vec![0; n];
        for i in 0..parent.len() {
            parent[i] = i;
        }
        UnionFind {
            parent,
            ranks: vec![0; n],
        }
    }

    fn find(&mut self, x: usize) -> usize {
        if self.parent[x] != x {
            self.parent[x] = self.find(self.parent[x]);
        }
        self.parent[x]
    }

    fn union(&mut self, u: usize, v: usize) {
        let i = self.find(u);
        let j = self.find(v);

        if i == j {
            return;
        } else if self.ranks[i] > self.ranks[j] {
            self.parent[j] = i;
        } else if self.ranks[i] < self.ranks[j] {
            self.parent[i] = j;
        } else {
            self.parent[i] = j;
            self.ranks[j] += 1;
        }
    }
}

impl Solution {
    pub fn find_redundant_connection(edges: Vec<Vec<i32>>) -> Vec<i32> {
        use std::collections::HashSet;
        let mut uf = UnionFind::new(edges.len());

        let mut res = Vec::new();
        for edge in edges {
            let (start, end) = (edge[0] as usize - 1, edge[1] as usize - 1);

            if uf.find(start) == uf.find(end) {
                return edge;
            }

            uf.union(start, end);
        }

        res
    }
}