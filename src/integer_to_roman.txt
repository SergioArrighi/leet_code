pub fn int_to_roman(num: i32) -> String {
    let mut roman = String::default();

    roman.push_str(&std::iter::repeat('M').take(num as usize / 1000).collect::<String>());
    let mut remainder = num % 1000;

    let mut r1 = remainder / 100;
    if r1 == 9 {
        roman.push_str("CM");
        remainder -= 900;
    } else if r1 == 4 {
        roman.push_str("CD");
        remainder -= 400;
    } else {
        roman.push_str(&std::iter::repeat('D').take(remainder as usize / 500).collect::<String>());
        remainder = remainder % 500;
    }

    roman.push_str(&std::iter::repeat('C').take(remainder as usize / 100).collect::<String>());
    remainder = remainder % 100;

    r1 = remainder / 10;
    if r1 == 9 {
        roman.push_str("XC");
        remainder -= 90;
    } else if r1 == 4 {
        roman.push_str("XL");
        remainder -= 40;
    } else {
        roman.push_str(&std::iter::repeat('L').take(remainder as usize / 50).collect::<String>());
        remainder = remainder % 50;
    }

    roman.push_str(&std::iter::repeat('X').take(remainder as usize / 10).collect::<String>());
    remainder = remainder % 10;

    if remainder == 9 {
        roman.push_str("IX");
        remainder -= 9;
    } else if remainder == 4 {
        roman.push_str("IV");
        remainder -= 4;
    } else {
        roman.push_str(&std::iter::repeat('V').take(remainder as usize / 5).collect::<String>());
        remainder = remainder % 5;
    }

    roman.push_str(&std::iter::repeat('I').take(remainder as usize).collect::<String>());

    roman
}

/*
Nice solution which explicetly uses combinations like char_indexes
const UNITS: &[(&str, i32)] = &[
    ("M", 1000),
    ("CM", 900),
    ("D", 500),
    ("CD", 400),
    ("C", 100),
    ("XC", 90),
    ("L", 50),
    ("XL", 40),
    ("X", 10),
    ("IX", 9),
    ("V", 5),
    ("IV", 4),
    ("I", 1),
];

pub fn int_to_roman(mut num: i32) -> String {
    UNITS.iter().map(|(unit, value)| {
        let quantity = num/value;
        num -= quantity * value;
        unit.repeat(quantity as usize)
    }).fold(String::new(), |a, b| a + &b)
}
*/

fn main() {
    assert_eq!(int_to_roman(3749), "MMMDCCXLIX");
    assert_eq!(int_to_roman(58), "LVIII");
    assert_eq!(int_to_roman(10), "X");
}
