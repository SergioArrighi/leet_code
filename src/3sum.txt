
/*
My solution runs in > 500ms
use std::collections::{HashSet, HashMap};

pub fn two_sum(nums: &[i32], target: i32, current_index: usize) -> Vec<Vec<i32>> {
    let mut result: Vec<Vec<i32>> = vec![];
    let mut hm = HashMap::with_capacity(nums.len());

    for (i, &num) in nums.iter().enumerate() {
        if i == current_index {
            continue;
        }
        if let Some(&j) = hm.get(&num) {
            let mut triplet = vec![-target, nums[j], nums[i]];
            triplet.sort();  // Sort to avoid duplicate permutations
            result.push(triplet);
        } else {
            hm.insert(target - num, i);
        }
    }

    result
}

pub fn three_sum(mut nums: Vec<i32>) -> Vec<Vec<i32>> {
    // Use a HashSet to avoid duplicate triplets
    let mut result: HashSet<Vec<i32>> = HashSet::new();
    // Sorting the array first
    nums.sort();

    for (i, &num) in nums.iter().enumerate() {
        // Skip duplicates for the first number of the triplet
        if i > 0 && nums[i] == nums[i - 1] {
            continue;
        }
        let target = -num;

        let two_sum_results = two_sum(&nums, target, i);

        for triplet in two_sum_results {
            // Automatically handles duplicate triplets
            result.insert(triplet);
        }
    }

    result.into_iter().collect()
}
*/

// 24 ms based on two pointers
pub fn three_sum(mut nums: Vec<i32>) -> Vec<Vec<i32>> {
    let mut result: Vec<Vec<i32>> = vec![];
    nums.sort();

    for i in 0..nums.len() {
        if i > 0 && nums[i] == nums[i - 1] {
            continue;
        }

        let mut left = i + 1;
        let mut right = nums.len() - 1;

        while left < right {
            let sum = nums[i] + nums[left] + nums[right];
            if sum > 0 {
                right -= 1;
            } else if sum < 0 {
                left += 1;
            } else {
                result.push(vec![nums[i], nums[left], nums[right]]);
                left += 1;
                while left < right && nums[left] == nums[left - 1] {
                    left += 1;
                }
            }
        }
    }

    result
}

fn main() {
    let nums = vec![1,2,-2,-1];
    let result = three_sum(nums);
    println!("{:?}", result);
}
