use std::collections::{BinaryHeap, HashMap};
use std::cmp::Reverse;

struct Solution;

impl Solution {
    pub fn network_delay_time(times: Vec<Vec<i32>>, n: i32, k: i32) -> (i32, HashMap<i32, Vec<i32>>) {
        let mut graph: HashMap<i32, Vec<(i32, i32)>> = HashMap::new();
        for time in times {
            graph.entry(time[0]).or_insert_with(Vec::new).push((time[1], time[2]));
        }

        let mut heap = BinaryHeap::new();
        heap.push((Reverse(0), k));

        let mut shortest_times = HashMap::new();
        let mut predecessors: HashMap<i32, i32> = HashMap::new();

        while let Some((Reverse(curr_time), node)) = heap.pop() {
            if shortest_times.contains_key(&node) {
                continue;
            }

            shortest_times.insert(node, curr_time);

            if let Some(neighbors) = graph.get(&node) {
                for &(neighbor, travel_time) in neighbors {
                    if !shortest_times.contains_key(&neighbor) {
                        predecessors.insert(neighbor, node);
                        heap.push((Reverse(curr_time + travel_time), neighbor));
                    }
                }
            }
        }

        let total_time = if shortest_times.len() == n as usize {
            *shortest_times.values().max().unwrap()
        } else {
            -1
        };

        let mut paths = HashMap::new();
        for &node in shortest_times.keys() {
            let path = Self::reconstruct_path(k, node, &predecessors);
            paths.insert(node, path);
        }

        (total_time, paths)
    }

    fn reconstruct_path(start: i32, target: i32, predecessors: &HashMap<i32, i32>) -> Vec<i32> {
        let mut path = Vec::new();
        let mut current = target;
        
        while let Some(&prev) = predecessors.get(&current) {
            path.push(current);
            current = prev;
        }

        if current == start {
            path.push(start);
            path.reverse();
            path
        } else {
            vec![]
        }
    }
}

// Main function to test the solution
fn main() {
    let times = vec![
        vec![2, 1, 1],
        vec![2, 3, 1],
        vec![3, 4, 1],
    ];
    let n = 4;
    let k = 2;

    let (total_time, paths) = Solution::network_delay_time(times, n, k);

    println!("Total time to reach all nodes: {}", total_time);
    println!("Paths from node {} to all reachable nodes:", k);
    for (node, path) in paths {
        println!("Node {}: {:?}", node, path);
    }
}
