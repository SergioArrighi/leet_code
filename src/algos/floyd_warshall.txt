use std::collections::HashMap;

struct Solution;

// Floyd-Warshall
impl Solution {
    pub fn network_delay_time(times: Vec<Vec<i32>>, n: i32, k: i32) -> (i32, HashMap<(i32, i32), Vec<i32>>) {
        let inf = i32::MAX / 2;
        let n = n as usize;
        let mut distance: Vec<Vec<i32>> = vec![vec![inf; n]; n];
        let mut predecessors = vec![vec![None; n]; n];
        
        // Initialize distances and predecessors based on input times
        for time in times {
            let (u, v, t) = (time[0] as usize - 1, time[1] as usize - 1, time[2]);
            distance[u][v] = t;
            predecessors[u][v] = Some(u as i32);
        }
        
        // Set distance from each node to itself as 0
        for i in 0..n {
            distance[i][i] = 0;
            predecessors[i][i] = Some(i as i32);
        }
        
        // Apply Floyd-Warshall algorithm
        for y in 0..n {
            for i in 0..n {
                for z in 0..n {
                    if distance[i][y] < inf && distance[y][z] < inf {
                        if distance[i][z] > distance[i][y] + distance[y][z] {
                            distance[i][z] = distance[i][y] + distance[y][z];
                            predecessors[i][z] = predecessors[i][y];
                        }
                    }
                }
            }
        }
        
        // Calculate the maximum time from source `k` to all other nodes
        let source = (k as usize) - 1;
        let mut max_time = 0;
        for i in 0..n {
            if distance[source][i] == inf {
                return (-1, HashMap::new());
            }
            max_time = max_time.max(distance[source][i]);
        }
        
        // Generate paths using the predecessor matrix
        let mut paths = HashMap::new();
        for i in 0..n {
            if distance[source][i] < inf {
                let mut path = Vec::new();
                let mut curr = i as i32;

                // Follow the predecessor chain to reconstruct the path
                while let Some(prev) = predecessors[source][curr as usize] {
                    path.push(curr + 1);  // Convert to 1-based index
                    if prev == curr {
                        break;
                    }
                    curr = prev;
                } // Add the source node
                path.reverse();
                paths.insert((k, i as i32 + 1), path);
            }
        }
        
        (max_time, paths)
    }
}

fn main() {
    let times = vec![
        vec![2, 1, 1],
        vec![2, 3, 1],
        vec![3, 4, 1],
    ];
    let n = 4;
    let k = 2;

    let (total_time, paths) = Solution::network_delay_time(times, n, k);
    println!("Total time to reach all nodes from {}: {}", k, total_time);
    println!("Paths from node {} to all other reachable nodes:", k);
    for ((src, dest), path) in paths {
        println!("Path from {} to {}: {:?}", src, dest, path);
    }
}
