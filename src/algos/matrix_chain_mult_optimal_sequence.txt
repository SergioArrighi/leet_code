fn matrix_chain_order(dims: &[usize]) -> (usize, String) {
    let n = dims.len() - 1;
    let mut dp = vec![vec![0; n]; n];
    let mut split = vec![vec![0; n]; n];

    // Fill the dp table
    for length in 2..=n {
        for i in 0..=n - length {
            let j = i + length - 1;
            dp[i][j] = usize::MAX;
            for k in i..j {
                let cost = dp[i][k] + dp[k + 1][j] + dims[i] * dims[k + 1] * dims[j + 1];
                if cost < dp[i][j] {
                    dp[i][j] = cost;
                    split[i][j] = k;
                }
            }
        }
    }

    // Helper function to build the optimal parenthesization
    fn build_optimal_parens(split: &Vec<Vec<usize>>, i: usize, j: usize) -> String {
        if i == j {
            format!("A{}", i + 1)
        } else {
            let k = split[i][j];
            format!(
                "({} * {})",
                build_optimal_parens(split, i, k),
                build_optimal_parens(split, k + 1, j)
            )
        }
    }

    // Get the optimal parenthesization structure
    println!("{:?}", split);
    let optimal_parens = build_optimal_parens(&split, 0, n - 1);
    (dp[0][n - 1], optimal_parens)
}

fn main() {
    let dimensions = [5, 4, 6, 2, 7]; // Example matrix dimensions
    let (min_cost, optimal_order) = matrix_chain_order(&dimensions);
    
    println!("Minimum multiplication cost: {}", min_cost);
    println!("Optimal parenthesization: {}", optimal_order);
}
